---
- name: OS packages
  package: "name={{ item }} state=present"
  with_items: "{{ openssl_pki_os_packages }}"

- name: Directories
  delegate_to: localhost
  file: "dest={{ item }} state=directory"
  with_items:
    - "{{ openssl_pki_certs_ca_root_dir }}"
    - "{{ openssl_pki_ca_path }}"
    - "{{ openssl_pki_ca_path }}/certs"
    - "{{ openssl_pki_ca_path }}/crl"
    - "{{ openssl_pki_ca_path }}/newcerts"
    - "{{ openssl_pki_ca_path }}/private"
    - "{{ openssl_pki_intermediate_ca_path }}"
    - "{{ openssl_pki_intermediate_ca_path }}/certs"
    - "{{ openssl_pki_intermediate_ca_path }}/crl"
    - "{{ openssl_pki_intermediate_ca_path }}/csr"
    - "{{ openssl_pki_intermediate_ca_path }}/newcerts"
    - "{{ openssl_pki_intermediate_ca_path }}/private"

- name: Set permissions for private directories
  delegate_to: localhost
  file:
    path: "{{ item }}"
    mode: "{{ openssl_pki_private_dir_mode }}"
  with_items:
    - "{{ openssl_pki_ca_path }}/private"
    - "{{ openssl_pki_intermediate_ca_path }}/private"

- name: Look for existing certificates and keys
  delegate_to: localhost
  stat:
    path: "{{ item }}"
  register: "openssl_pki_stat_existing"
  with_items:
    - "{{ openssl_pki_ca_key }}"
    - "{{ openssl_pki_ca_cert }}"
    - "{{ openssl_pki_intermediate_key }}"
    - "{{ openssl_pki_intermediate_cert }}"
    - "{{ openssl_pki_intermediate_chain }}"

- block:
  - name: Index files
    delegate_to: localhost
    file: "dest={{ item }} state=touch"
    with_items:
      - "{{ openssl_pki_ca_path }}/index.txt"
      - "{{ openssl_pki_intermediate_ca_path }}/index.txt"
    changed_when: false

  - name: Serial files
    delegate_to: localhost
    copy: src=serial dest="{{ item }}" force=no
    with_items:
      - "{{ openssl_pki_ca_path }}/serial"
      - "{{ openssl_pki_intermediate_ca_path }}/serial"
      - "{{ openssl_pki_intermediate_ca_path }}/crlnumber"

  - name: OpenSSL root config
    delegate_to: localhost
    template:
      src: root_openssl.cnf.j2
      dest: "{{ openssl_pki_ca_config }}"

  - name: OpenSSL intermediate config
    delegate_to: localhost
    template:
      src: intermediate_openssl.cnf.j2
      dest: "{{ openssl_pki_intermediate_config }}"
  - name: Generate root key
    delegate_to: localhost
    command: "openssl genrsa -out {{ openssl_pki_ca_key }} {{ opsnssl_pki_ca_key_strength }}"
    args:
      creates: "{{ openssl_pki_ca_key }}"

  - name: Set permissions for root ca key
    delegate_to: localhost
    file:
      path: "{{ openssl_pki_ca_key }}"
      mode: "{{ openssl_pki_ca_key_mode }}"

  - name: Generate root certificate
    delegate_to: localhost
    command: "openssl req -config {{ openssl_pki_ca_config }} -subj {{ openssl_pki_ca_fields }} -key {{ openssl_pki_ca_key }} -new -x509 -days {{ openssl_pki_ca_days }} -{{ openssl_pki_hash_type }} -extensions v3_ca -out {{ openssl_pki_ca_cert }}"
    args:
      creates: "{{ openssl_pki_ca_cert }}"

  - name: Set permissions for root certificate
    delegate_to: localhost
    file:
      path: "{{ openssl_pki_ca_cert }}"
      mode: "{{ openssl_pki_ca_cert_mode }}"

  - name: Generate intermediate key
    delegate_to: localhost
    command: "openssl genrsa -out {{ openssl_pki_intermediate_key }} {{ opsnssl_pki_intermediate_key_strength }}"
    args:
      creates: "{{ openssl_pki_intermediate_key }}"

  - name: Set permissions for intermediate key
    delegate_to: localhost
    file:
      path: "{{ openssl_pki_intermediate_key }}"
      mode: "{{ openssl_pki_intermediate_key_mode }}"

  - name: Generate intermediate csr
    delegate_to: localhost
    command: "openssl req -config {{ openssl_pki_intermediate_config }} -new -{{ openssl_pki_hash_type }} -subj {{ openssl_pki_intermediate_fields }} -key {{ openssl_pki_intermediate_key }} -out {{ openssl_pki_intermediate_csr }}"
    args:
      creates: "{{ openssl_pki_intermediate_csr }}"

  - name: Generate intermediate certificate
    delegate_to: localhost
    command: "openssl ca -batch -config {{ openssl_pki_ca_config }} -extensions v3_intermediate_ca -days {{ openssl_pki_intermediate_cert_days }} -notext -md {{ openssl_pki_hash_type }} -in {{ openssl_pki_intermediate_csr }} -out {{ openssl_pki_intermediate_cert }}"
    args:
      creates: "{{ openssl_pki_intermediate_cert }}"

  - name: Set permissions for intermediate certificate
    delegate_to: localhost
    file:
      path: "{{ openssl_pki_intermediate_cert }}"
      mode: "{{ openssl_pki_intermediate_cert_mode }}"

  - name: Validate root and intermediate certs
    delegate_to: localhost
    command: "openssl verify -CAfile {{ openssl_pki_ca_cert }} {{ openssl_pki_intermediate_cert }}"
    changed_when: false

  when:
    - openssl_pki_stat_existing['results'][2]['stat']['exists'] == false
    - openssl_pki_stat_existing['results'][3]['stat']['exists'] == false

- name: Look for created certificates and keys
  delegate_to: localhost
  stat:
    path: "{{ item }}"
  register: "openssl_pki_stat_created"
  with_items:
    - "{{ openssl_pki_ca_key }}"
    - "{{ openssl_pki_ca_cert }}"
    - "{{ openssl_pki_intermediate_key }}"
    - "{{ openssl_pki_intermediate_cert }}"

- name: Fail if we don't have and can't make the ca-chain file.
  delegate_to: localhost
  fail:
    msg: "Please provide an intermediate key, intermediate cert, and ca-chain/root certificate. See README for more."
  when:
    - openssl_pki_stat_created['results'][2]['stat']['exists'] == false or openssl_pki_stat_created['results'][3]['stat']['exists'] == false or (openssl_pki_stat_existing['results'][4]['stat']['exists'] == false and openssl_pki_stat_created['results'][1]['stat']['exists'] == false)

- name: Generate intermediate chain
  delegate_to: localhost
  template:
    src: ca-chain.cert.pem.j2
    dest: "{{ openssl_pki_intermediate_chain }}"
  when: openssl_pki_stat_existing['results'][4]['stat']['exists'] == false

- name: Set permissions for intermediate chain
  delegate_to: localhost
  file:
    path: "{{ openssl_pki_intermediate_chain }}"
    mode: "{{ openssl_pki_intermediate_chain_mode }}"

- name: Server directories
  file: "dest={{ item }} state=directory"
  with_items:
    - "{{ openssl_pki_certs_server_root_dir }}"
    - "{{ openssl_pki_server_ca_path }}"

- name: Write SSL conf to servers
  template:
    src: server_openssl.cnf.j2
    dest: "{{ openssl_pki_server_config }}"

- name: Generate server keys
  command: "openssl genrsa -out {{ openssl_pki_server_key }} {{ opsnssl_pki_server_key_strength }}"
  args:
    creates: "{{ openssl_pki_server_key }}"

- name: Set permissions for server keys
  file:
    path: "{{ openssl_pki_server_key }}"
    mode: "{{ openssl_pki_server_key_mode }}"

- name: Generate server CSRs
  command: "openssl req -config {{ openssl_pki_server_config }} -subj {{ openssl_pki_common_fields }}/CN={{ openssl_pki_server_common_name }} -key {{ openssl_pki_server_key }} -new -{{ openssl_pki_hash_type }} -out {{ openssl_pki_server_csr }}"
  args:
    creates: "{{ openssl_pki_server_csr }}"

- name: Copy server CSRs to controller
  fetch:
    src: "{{ openssl_pki_server_csr }}"
    dest: "{{ openssl_pki_intermediate_ca_path }}/csr/"
    fail_on_missing: yes

- name: Make server certificate destination directories
  delegate_to: localhost
  file: "dest={{ openssl_pki_intermediate_ca_path }}/certs/{{ item }} state=directory"
  with_items:
    - "{{ ansible_play_hosts }}"

- name: Put intermediate chain on servers
  copy:
    src: "{{ openssl_pki_intermediate_chain }}"
    dest: "{{ openssl_pki_server_intermediate_chain }}"

- name: Generate server certificates
  delegate_to: localhost
  command: "openssl ca -batch -config {{ openssl_pki_intermediate_config }} -extensions server_cert -days {{ openssl_pki_server_cert_days }} -notext -md {{ openssl_pki_hash_type }} -in {{ openssl_pki_intermediate_ca_path }}/csr/{{ item }}/{{ openssl_pki_server_csr }} -out {{ openssl_pki_intermediate_ca_path }}/certs/{{ item }}/{{ openssl_pki_server_common_name }}.cert.pem"
  args:
    creates: "{{ openssl_pki_intermediate_ca_path }}/certs/{{ item }}/{{ openssl_pki_server_common_name }}.cert.pem"
    removes: "{{ openssl_pki_intermediate_ca_path }}/csr/{{ item }}/{{ openssl_pki_server_csr }}"
  with_items:
    - "{{ ansible_play_hosts }}"
  loop_control:
    pause: 1

- name: Validate server certificates with chain
  delegate_to: localhost
  command: "openssl verify -CAfile {{ openssl_pki_intermediate_chain }} {{ openssl_pki_intermediate_ca_path }}/certs/{{ item }}/{{ openssl_pki_server_common_name }}.cert.pem"
  changed_when: false
  with_items:
    - "{{ ansible_play_hosts }}"

- name: Put signed certificates on servers
  copy:
    src: "{{ openssl_pki_intermediate_ca_path }}/certs/{{ inventory_hostname }}/{{ openssl_pki_server_common_name }}.cert.pem"
    dest: "{{ openssl_pki_server_cert }}"

- name: Set permissions for server certificates
  file:
    path: "{{ openssl_pki_server_cert }}"
    mode: "{{ openssl_pki_server_cert_mode }}"
